generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id               String         @id @default(uuid())
  loginId          String         @unique @map("login_id")
  name             String         @unique
  email            String         @unique
  emailVerified    DateTime?      @map("email_verified")
  image            String?        @map("profile_image")
  coverImage       String?        @map("cover_image")
  bio              String?
  password         String?
  role             UserRole       @default(USER)
  isProfilePublic  Boolean        @default(true) @map("is_profile_public")
  isActive         Boolean        @default(true) @map("is_active")
  level            Int            @default(1)
  experience       Int            @default(0)
  lastActivityDate DateTime?      @map("last_activity_date")
  waterCount       Int            @default(0) @map("water_count")
  nutrientCount    Int            @default(0) @map("nutrient_count")
  interests        String[]
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  phone            String?        @map("phone")
  accounts         Account[]
  articles         Article[]
  careRecords      CareRecord[]
  careReminders    CareReminder[]
  comments         Comment[]
  diaries          Diary[]
  events           Event[]
  followersList    Follow[]       @relation("UserFollows")
  followingList    Follow[]       @relation("UserFollowing")
  galleries        Gallery[]
  likes            Like[]
  notifications    Notification[]
  plants           Plant[]
  sessions         Session[]
  reports          Report[]       @relation("UserReports")
  reviewedReports  Report[]       @relation("UserReviews")

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String    @id
  name        String    @unique
  description String?
  color       String?
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  articles    Article[]

  @@map("categories")
}

model Plant {
  id               String         @id @default(uuid())
  name             String
  image            String
  category         String
  description      String?
  location         String?
  purchaseDate     DateTime?      @map("purchase_date")
  wateringInterval Int            @default(7) @map("watering_interval")
  nutrientInterval Int            @default(30) @map("nutrient_interval")
  lastWateredDate  DateTime?      @map("last_watered_date")
  nextWateringDate DateTime?      @map("next_watering_date")
  lastNutrientDate DateTime?      @map("last_nutrient_date")
  nextNutrientDate DateTime?      @map("next_nutrient_date")
  temperature      Float?
  humidity         Float?
  sunlight         String?
  isPublic         Boolean        @default(true) @map("is_public")
  isActive         Boolean        @default(true) @map("is_active")
  needsWater       Boolean        @default(false) @map("needs_water")
  needsNutrient    Boolean        @default(false) @map("needs_nutrient")
  tags             String[]
  reportCount      Int            @default(0) @map("report_count")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  authorId         String         @map("author_id")
  careRecords      CareRecord[]
  careReminders    CareReminder[]
  diaries          Diary[]
  galleries        Gallery[]
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("plants")
}

model CareRecord {
  id        String   @id @default(uuid())
  type      String
  date      DateTime
  amount    Float?
  notes     String?
  isToday   Boolean  @default(false) @map("is_today")
  createdAt DateTime @default(now()) @map("created_at")
  plantId   String   @map("plant_id")
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  plant     Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@index([authorId, type, isToday])
  @@map("care_records")
}

model CareReminder {
  id            String    @id @default(uuid())
  type          String
  scheduledDate DateTime  @map("scheduled_date")
  isCompleted   Boolean   @default(false) @map("is_completed")
  completedDate DateTime? @map("completed_date")
  createdAt     DateTime  @default(now()) @map("created_at")
  plantId       String    @map("plant_id")
  authorId      String    @map("author_id")
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  plant         Plant     @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@map("care_reminders")
}

model Article {
  title       String
  content     String
  summary     String?
  image       String?
  tags        String[]
  id          Int       @id @default(autoincrement())
  authorId    String    @map("author_id")
  categoryId  String    @map("category_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  isPublished Boolean   @default(true) @map("is_published")
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  viewCount   Int       @default(0) @map("view_count")
  reportCount Int       @default(0) @map("report_count")
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])
  comments    Comment[]

  @@map("articles")
}

model Diary {
  id          String   @id @default(uuid())
  title       String
  content     String
  date        DateTime
  image       String?
  status      String
  tags        String[]
  isPublic    Boolean  @default(true) @map("is_public")
  isActive    Boolean  @default(true) @map("is_active")
  reportCount Int      @default(0) @map("report_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  plantId     String?  @map("plant_id")
  authorId    String   @map("author_id")
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  plant       Plant?   @relation(fields: [plantId], references: [id])

  @@map("diaries")
}

model Gallery {
  id           String   @id @default(uuid())
  title        String
  image        String
  description  String?
  tags         String[]
  isPublic     Boolean  @default(true) @map("is_public")
  isActive     Boolean  @default(true) @map("is_active")
  displayOrder Int      @default(0) @map("display_order")
  isFeatured   Boolean  @default(false) @map("is_featured")
  reportCount  Int      @default(0) @map("report_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  plantId      String?  @map("plant_id")
  authorId     String   @map("author_id")
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  plant        Plant?   @relation(fields: [plantId], references: [id])

  @@map("galleries")
}

model Event {
  title          String
  subtitle       String
  image          String
  description    String
  content        String
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  isEnded        Boolean  @default(false) @map("is_ended")
  thumbnailImage String?  @map("thumbnail_image")
  tags           String[]
  viewCount      Int      @default(0) @map("view_count")
  reportCount    Int      @default(0) @map("report_count")
  participants   Int      @default(0)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  authorId       String   @map("author_id")
  id             Int      @id @default(autoincrement())
  author         User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  authorId  String    @map("author_id")
  parentId  String?   @map("parent_id")
  articleId Int       @map("article_id")
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  type      String
  targetId  String   @map("target_id")
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, targetId])
  @@map("likes")
}

model Follow {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

enum NotificationType {
  GENERAL
  ADMIN_MESSAGE
  PLANT_CARE_WATER
  PLANT_CARE_NUTRIENT
  NEW_ARTICLE
  NEW_COMMENT
  CONTENT_LIKED
  UPLOAD_SUCCESS
  UPLOAD_FAILED
  REPORT_STATUS_CHANGED
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType @default(GENERAL)
  isRead    Boolean          @default(false) @map("is_read")
  title     String
  message   String
  link      String?
  createdAt DateTime         @default(now()) @map("created_at")

  recipientId String @map("recipient_id")
  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  actorId String? @map("actor_id")

  // 관련 콘텐츠 ID
  articleId Int?    @map("article_id")
  diaryId   String? @map("diary_id")
  galleryId String? @map("gallery_id")
  plantId   String? @map("plant_id")
  commentId String? @map("comment_id")
  reportId  String? @map("report_id")

  @@index([recipientId, isRead, createdAt(sort: Desc)])
  @@map("notifications")
}

model Report {
  id          String   @id @default(uuid())
  reason      String
  description String?
  contentType String   @map("content_type")
  contentId   String   @map("content_id")
  status      String   @default("pending")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  reporterId  String   @map("reporter_id")
  reviewerId  String?  @map("reviewer_id")
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer    User?    @relation("UserReviews", fields: [reviewerId], references: [id])

  @@index([contentType, contentId])
  @@index([status, createdAt])
  @@map("reports")
}
